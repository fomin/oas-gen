import io.github.fomin.oasgen.gradle.*
import io.github.fomin.oasgen.gradle.java.*
import io.github.fomin.oasgen.gradle.typescript.*

plugins {
    id "io.github.fomin.oas-gen" version "0.1.14-SNAPSHOT"
    id "java"
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencyLocking {
    lockAllConfigurations()
    lockMode.set(LockMode.STRICT)
}

def oasGenVersion = "0.1.14-SNAPSHOT"

oasGen {
    generate("test1") {
        source = new DirectorySource(file("../../../test-schemas/src/main/resources/openapi"))
        schemaPath = "simple.yaml"
        generator = BuiltinJavaGenerators.javaReactorNettyClient(
                new SingleNamespace("namespace"),
                new SingleOutput(java.sourceSets.named("main")),
                []
        )
    }
    generate("test2") {
        source = new DirectorySource(file("../../../test-schemas/src/main/resources/openapi"))
        schemaPath = "simple.yaml"
        generator = BuiltinTypeScriptGenerators.typescriptSimpleGenerator(
                file("$buildDir/oas-gen/test2"),
                []
        )
    }
    generate("test3") {
        source = new DependencySource("io.github.fomin.oas-gen:oas-gen-test-schemas:$oasGenVersion")
        schemaPath = "openapi/simple.yaml"
        generator = new JavaGenerator(
                "java-reactor-netty-client",
                ["io.github.fomin.oas-gen:oas-gen-java-reactor-netty-generator:$oasGenVersion".toString()],
                new SingleNamespace("namespace"),
                new SingleOutput(java.sourceSets.named("main")),
                [],
                ["io.github.fomin.oas-gen:oas-gen-java-reactor-netty-runtime:$oasGenVersion".toString()],
        )
    }
}

configurations {
    oasGen3Classpath
    oasGen3Source
}

dependencies {
    oasGen3Classpath "io.github.fomin.oas-gen:oas-gen-java-reactor-netty-generator:$oasGenVersion"
    oasGen3Source files("../../../test-schemas/src/main/resources/openapi")
}

tasks.register("oasGen3", OasGenTask) {
    generatorClasspathProvider.from(configurations.oasGen3Classpath)
    generatorId = "java-reactor-netty-client"
    sourceDependency.from(configurations.oasGen3Source)
    schemaPath = "simple.yaml"
    dtoNamespace = "com.example1"
    routeNamespace = "com.example1"
    dtoOutputDir = file("$buildDir/oas-gen/generated3")
    routeOutputDir = file("$buildDir/oas-gen/generated3")
}
